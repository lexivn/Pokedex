LEARNING GOALS
===============

* Create fluid user interfaces through DOM manipulation
* Apply event handling for web interactivity and accessibility



	REMEMBER
	========

	Nodes: Are HTML elements within the DOM. They are used to manipulate the DOM.
 
	What is the DOM
	===============
	 Is a programming interface for HTML. It represents an HTML web page as JavaScript "objects", allowing JavaScript to interact with, make changes to the HTML page.
	 YOU CAN THINK ON HTML AS THE BROWSER"S INSTRUCTIONS ON HOW TO BUILD THE DOM.
	 
	 TRAVERSING THE DOM
	 ==================
		You first need to select certain element. A node is the DOM's equivalente of an HTML tag. When your HTML is turned into the DOM, each HTML element inside your code is turned into a node object.
		
		Selecting Nodes
		================
		There are two built-in functions yoi can use to select nodes in the DOM:
		
		
		• querySelector(): this returns one node.
			
			Example: document.querySelector('.name-input'); This will return the first element with the name name-input class the function finds (or null if no element with a matching selector can bu found). If thre's more than one matching element, only the first will be returned.
				
		
		• querySelectorAl(): this returns a list of nodes (or called NodeList) with all the matching elements. IMPORTANT. NodeList does look similar to a regular array, it is actually different.
		You can use .length, .foreach, and access specific items with square brackets notation. You CANT use functions like .push.
		
			** Both take a CSS selector string as a paramter. For instance:
				'.my-class'
				'#my-id'
				'ul > li.my-class'
				
			** Both are called in te document objects
			
			Example:
			document.querySelectorAll('.name-input');
			
			Return a NodeList with all the matching elements. It's similiar to a regular array but cant use array functions such as .push.
			
			
		Traversing Nodes
		=================
			
			let element = document.querySelector('.bob');
			element.parentElement; // Get the parent node of the element
			element.nextElementSibling; // Get the next sibling element, or null if it’s the last one
			element.previousElementSibling; // Get the previous sibling element, or null if it’s the first one
			element.firstElementChild; // The first child of the element
			element.lastElementChild; // The last child of the element
			element.childElementCount; // The number of children this element has
			element.children; // (IMPORTANT: Not recommended) The direct children of this element
			
			Example:
			
			<div class="parent">
				<div class="previous-sibling"></div>
				<div class="bob"><!-- THIS IS OUR ELEMENT -->
					<div class="first-child"></div>
					<div class="last-child"></div>
				</div>
			<div class="next-sibling"></div>
			</div>
		In the example above, if element is referring to document.querySelector('.bob'), then element.childElementCount will return “2”.

			To get the direct children of element in the above example, you can utilize a CSS trick using the > selector with the querySelectorAll() function, like this:

		document.querySelectorAll('.bob > *'
		
	 
		 
	 MANIPULATING THE DOM
	 ====================
	 Example: Traverse and Manipulating the DOM:
	 
	 
		let mainTitle = document.querySelector('h1');
		console.log(mainTitle.innerText);
		mainTitle.innerText = "Hello world";
		console.log(mainTitle.innerText);

		let container = document.querySelector('.container');

		container.innerHTML = '<button>Click me</button>';



		let button = document.createElement('button');
		button.innerText = 'Click me';
		container.appendChild(button);

		let elementToRemove = document.querySelector('p');
		elementToRemove.parentElement.removeChild
		(elementToRemove);
		
		
		
	EVENT HANDLING
	==============
	An event is anything that happens on a page. Such as a buttn being clicked or text being entered into an input field. 
	How you can record them?
	In JavaScript this is called listening for an event. This could be an <input> element, the <body> element for in some cases, the WINDOW element.
	
	Example 1:
	=========
	
		-- HTML --
		<button>Click Me</button>

		-- JAVASCRIPT --
		let button = document.querySelector('button');
		button.addEventListener('click', function (event) {
		  console.log(event);
		});
		
		Useful properties:
		
		event.target; // The element that dispatched the event, e.g., button
		event.type; // The type of the event, e.g., 'click'
		
		
	Example 2:
	=========
		
		-- HTML --
		<form id='survey_form'>
		  <label for='question_1'>What is your favorite food?</label>
		  <input id='question_1' type='text'>

		  <button>Submit</button>
		</form>

		-- CSS --
		.hidden {
		  display: none;
		}

		-- JAVASCRIPT --
		window.addEventListener('keydown', function(event){
		  let survey_form = document.querySelector('#survey_form');
		  let isFormHidden = survey_form.classList.contains('hidden');
		  if( !isFormHidden && event.key === 'Escape'){
			survey_form.classList.add('hidden');
		  }
		});
		
		OR
		
		function hideSurveyForm(event) {
		  let survey_form = document.querySelector('#survey_form');
		  let isFormHidden = survey_form.classList.contains('hidden');
		  if( !isFormHidden && event.key === 'Escape'){
			survey_form.classList.add('hidden');
		  }
		}

		window.addEventListener('keydown', hideSurveyForm);
		
		* Notice that, in window.addEventListener('keydown', ...), the keydown event is listened to on the whole window object (which represents the browser window), rather than for a specific element. 
		
		* Event listeners stay until you remove them, which you can do with the function removeEventListener. It requires the exact same parameters you used for addEventListener (and is necessary because an element can have multiple event listeners):

		input.addEventListener('change', checkInput);
		input.addEventListener('change', specialValidation);
		input.addEventListener('click', function () {
		  // This can’t be removed as we didn’t specify a named function
		});
		input.removeEventListener('change', checkInput); // specialValidation will remain
		
		
		Preventing Default Event Behavior
		=================================
		
		event.preventDefault(): If you call this function inside an event handler for the submit event, the form won’t be sent:
		
		let form = document.querySelector('form');
		form.addEventListener('submit', function (event) {
		  event.preventDefault();
		  // Do something manually; for example, add custom validations
		});
		
		* There are similar default behaviors that happen for other events, such as click on an <a> element (which is set to automatically move you to the page specified in href)
		
		Manually Triggering Events
		===========================
		element.focus(); // Focus on this element. Mainly useful for <input> or <textarea>
		element.click(); // Click on this element
		element.blur(); // Remove focus from this element
		form.submit(); // Manually submits the form (in case form refers to a form element)
		
		Events and Accessibility
		=========================
		Not recommended to use click event on a <div>, cause it would make inaccessible to screen reader users
		* RULE: - Only listen to CLICK events on interactive elements such as <button>, <input type='submit'>
				- USe HTML elemtns for what they're meant to do. Buttons should be <button>, links should be <a>, text paragraphs should be <p> and so on.
			
		document.querySelector('.show-more').addEventListener('click', function () {
			document.querySelector('.additional-information')
			.classList.toggle('is-visible');
		});
		Exaplanation:
		When the user clicks “Show more,” the is-visible class is toggled on the element that has the .additional-information class. So if the is-visible class is already on the element, it will be removed, and if it’s not yet on the element, it will be added. This can be very useful for toggling something on and off, like a dropdown.
		
		IMPORTANT:
		==========
		• Only add click events to interactive elements like <button>
		• Use <button> instead of <a> when you’re not changing the URL
		• Use the submit event on <form> rather than the click event on the submit <button>